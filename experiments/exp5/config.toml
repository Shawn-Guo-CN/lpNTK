[default]
use_cuda = true
batch_size = 128
test_batch_size = 1024
seed = 1

model = "LeNet"
num_classes = 10
optim = "SGD"
lr = 0.1
momentum = 0.9
gamma=0.7
weight_decay = 5e-4

epochs = 30


[sweep]
seeds = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
pruned_datasets = [
    'MaskSum_hier',
    'Sum_hier',
    'Uniform',
    'Sum_selfmax',
    'MaskSum_selfmax',
    'raw',
    'MaskSum_far_head',
    'MaskSum_far_random',
    'MaskSum_avg'
]
ratios = [] # set as you need

[MNIST]
num_classes = 10
transform = """transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize([0.1307,], [0.3081,])
    ])"""
test_transform = """transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize([0.1307,], [0.3081,])
    ])"""


[CIFAR10]
model = "ResNet18"
epochs = 200
transform = """transforms.Compose([
    transforms.ToTensor(),
    transforms.RandomCrop(32, padding=4),
    transforms.RandomHorizontalFlip(),
    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010))
    ])"""
test_transform = """transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),
    ])"""


[CIFAR100]
model = "ResNet50"
num_classes = 100
batch_size = 4
epochs = 40
lr = 5e-4
transform = """transforms.Compose([
    transforms.ToTensor(),
    transforms.RandomCrop(32, padding=4),
    transforms.RandomHorizontalFlip(),
    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010))
    ])"""
test_transform = """transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),
    ])"""


[wandb]
project = "Transmission-Phase"
experiment = "Retrain"
